{
	"name": "cleanup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AggregatedParquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "nulls"
				},
				{
					"name": "select1"
				},
				{
					"name": "negativeAge"
				}
			],
			"scriptLines": [
				"source(output(",
				"          age as double,",
				"          job as string,",
				"          marital as string,",
				"          education as string,",
				"          default as string,",
				"          housing as string,",
				"          loan as string,",
				"          contact as string,",
				"          month as string,",
				"          day_of_week as string,",
				"          unique_id as string,",
				"          duration as string,",
				"          campaign as string,",
				"          pdays as string,",
				"          previous as string,",
				"          poutcome as string,",
				"          {emp.var.rate} as string,",
				"          {cons.price.idx} as string,",
				"          {cons.conf.idx} as string,",
				"          euribor3m as string,",
				"          {nr.employed} as string,",
				"          y as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 filter(contains(array(toString(columns())),!isNull(#item))) ~> nulls",
				"negativeAge select(mapColumn(",
				"          age,",
				"          job,",
				"          marital,",
				"          education,",
				"          housing,",
				"          loan,",
				"          contact,",
				"          month,",
				"          day_of_week,",
				"          unique_id,",
				"          duration,",
				"          campaign,",
				"          pdays,",
				"          previous,",
				"          poutcome,",
				"          {emp.var.rate},",
				"          {cons.price.idx},",
				"          {cons.conf.idx},",
				"          euribor3m,",
				"          {nr.employed},",
				"          y",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"nulls filter(greaterOrEqual(age, 0)) ~> negativeAge",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['cleanup_data.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}